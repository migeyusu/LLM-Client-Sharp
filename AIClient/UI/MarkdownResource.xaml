<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:markdig="clr-namespace:Markdig.Wpf;assembly=Markdig.Wpf"
                    xmlns:llmClient="clr-namespace:LLMClient"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:render="clr-namespace:LLMClient.Render"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
                    xmlns:converters="clr-namespace:LLMClient.UI.Component.Converters">
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333" />
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333" />
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF" />
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000" />
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000" />
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070" />
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}"
                                     HorizontalAlignment="Center" Height="19"
                                     Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center"
                                     Width="19" />
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center"
                                  Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false"
                                  StrokeThickness="2" VerticalAlignment="Center" />
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AIContentExpander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent" /> <!--{DynamicResource MaterialDesign.Brush.Background}-->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.Card.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="true">
                        <Rectangle Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness, Converter={x:Static converters:SnapConverters.ThicknessToDoubleConverter}}"
                                   RadiusX="4" RadiusY="4"
                                   StrokeDashArray="6,2"
                                   SnapsToDevicePixels="True"
                                   Margin="5" />

                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}"
                                          Foreground="{TemplateBinding Foreground}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          FontSize="{TemplateBinding FontSize}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                          Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Visibility="Collapsed" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Document styles -->
    <Style TargetType="{x:Type FlowDocument}" x:Key="{x:Static markdig:Styles.DocumentStyleKey}">
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="TextAlignment" Value="Left" />
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="{x:Static render:TextMateCodeRenderer.CodeBlockHeaderStyleKey}">
        <Setter Property="Height"
                Value="40" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type render:CodeContext}">
                    <Grid>
                        <Rectangle Fill="{DynamicResource MaterialDesign.Brush.Chip.Background}"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch" />
                        <TextBlock Text="{Binding  Extension,Mode=OneTime}"
                                   Padding="10,0,0,0"
                                   Foreground="{DynamicResource MaterialDesign.Brush.Header.Foreground}"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center" />
                        <Button HorizontalAlignment="Right"
                                Style="{DynamicResource MaterialDesignFlatLightButton}"
                                Command="{Binding CopyCommand}"
                                Foreground="{DynamicResource MaterialDesign.Brush.Foreground}">
                            <materialDesign:PackIcon Kind="ContentCopy" />
                        </Button>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type render:TextmateColoredRun}"
           x:Key="{x:Static render:TextMateCodeRenderer.TokenStyleKey}">
        <Setter Property="ThemeColors"
                Value="{DynamicResource CodeBlock.TextMateSharp.Theme}" />
    </Style>

    <Style TargetType="{x:Type Expander}"
           BasedOn="{StaticResource AIContentExpander}"
           x:Key="{x:Static render:ThinkBlockRenderer.ThinkBlockExpanderStyleKey}">
        <Setter Property="Padding"
                Value="16" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal"
                                VerticalAlignment="Center">
                        <materialDesign:PackIcon Kind="HeadDotsHorizontalOutline"
                                                 Margin="6,0,0,0" />
                        <TextBlock Text="已完成思考"
                                   VerticalAlignment="Center"
                                   Margin="6,0,0,0"
                                   FontWeight="Bold"
                                   Foreground="{DynamicResource MaterialDesign.Brush.Foreground}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Foreground="DarkGray"
                               FontStyle="Italic"
                               TextWrapping="Wrap"
                               Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}"
           BasedOn="{StaticResource AIContentExpander}"
           x:Key="{x:Static render:FunctionCallBlockRenderer.FunctionCallBlockExpanderStyleKey}">
        <Setter Property="Padding"
                Value="16" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal"
                                VerticalAlignment="Center">
                        <materialDesign:PackIcon Kind="Function"
                                                 Width="20"
                                                 Height="20"
                                                 Margin="6,0,0,0" />
                        <TextBlock Text="函数调用"
                                   VerticalAlignment="Center"
                                   Margin="6,0,0,0"
                                   FontWeight="Bold"
                                   Foreground="{DynamicResource MaterialDesign.Brush.Foreground}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Foreground="DarkGray"
                               FontStyle="Italic"
                               TextWrapping="Wrap"
                               Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}"
           BasedOn="{StaticResource AIContentExpander}"
           x:Key="{x:Static render:FunctionResultBlockRenderer.FunctionResultBlockExpanderStyleKey}">
        <Setter Property="Padding"
                Value="16" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal"
                                VerticalAlignment="Center">
                        <materialDesign:PackIcon Kind="CallReceived"
                                                 Margin="6,0,0,0" />
                        <TextBlock Text="函数调用结果"
                                   VerticalAlignment="Center"
                                   Margin="6,0,0,0"
                                   FontWeight="Bold"
                                   Foreground="{DynamicResource MaterialDesign.Brush.Foreground}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Foreground="DarkGray"
                               FontStyle="Italic"
                               TextWrapping="Wrap"
                               Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type List}">
        <Setter Property="Margin" Value="40,0,0,0" />
        <Setter Property="Padding" Value="0,0,0,0" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.CodeBlockStyleKey}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Background}" />
        <Setter Property="BreakColumnBefore"
                Value="True" />
        <Setter Property="BreakPageBefore"
                Value="True" />
        <Setter Property="Cursor"
                Value="IBeam" />
        <Setter Property="Padding"
                Value="5,10" />
        <Setter Property="Margin"
                Value="0,0,0,0" />
        <Setter Property="Foreground"
                Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="FontFamily" Value="Consolas, Lucida Sans Typewriter, Courier New" />
    </Style>
    <Style TargetType="{x:Type Run}" x:Key="{x:Static markdig:Styles.CodeStyleKey}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.TextBox.FilledBackground}" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily" Value="Consolas, Lucida Sans Typewriter, Courier New" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading1StyleKey}">
        <Setter Property="FontSize" Value="42" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading2StyleKey}">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading3StyleKey}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading4StyleKey}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="TextDecorations" Value="Underline" />
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading5StyleKey}">
        <!-- no changes -->
    </Style>
    <Style TargetType="{x:Type Paragraph}" x:Key="{x:Static markdig:Styles.Heading6StyleKey}">
        <!-- no changes -->
    </Style>
    <Style TargetType="{x:Type Hyperlink}" x:Key="{x:Static markdig:Styles.HyperlinkStyleKey}">
        <!-- no changes -->
    </Style>
    <Style TargetType="{x:Type Image}" x:Key="{x:Static markdig:Styles.ImageStyleKey}">
        <Setter Property="MaxHeight"
                Value="{Binding RelativeSource={RelativeSource Self}, Path=Source.(BitmapSource.PixelHeight)}" />
        <Setter Property="MaxWidth"
                Value="{Binding RelativeSource={RelativeSource Self}, Path=Source.(BitmapSource.PixelWidth)}" />
    </Style>
    <Style TargetType="{x:Type Section}" x:Key="{x:Static markdig:Styles.QuoteBlockStyleKey}">
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.Card.Border}" />
        <Setter Property="BorderThickness" Value="4,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Chip.OutlineBorder}" />
        <Setter Property="Padding" Value="16,0,0,0" />
    </Style>
    <Style TargetType="{x:Type Table}" x:Key="{x:Static markdig:Styles.TableStyleKey}">
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.DataGrid.Border}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="CellSpacing" Value="0" />
    </Style>
    <Style TargetType="{x:Type TableCell}" x:Key="{x:Static markdig:Styles.TableCellStyleKey}">
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.ListView.Separator}" />
        <Setter Property="BorderThickness" Value="1,1,0,0" />
    </Style>
    <Style TargetType="{x:Type TableRow}" x:Key="{x:Static markdig:Styles.TableHeaderStyleKey}">
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style TargetType="{x:Type CheckBox}" x:Key="{x:Static markdig:Styles.TaskListStyleKey}">
        <Setter Property="Margin" Value="0,0,0,-2" />
    </Style>
    <Style TargetType="{x:Type Line}" x:Key="{x:Static markdig:Styles.ThematicBreakStyleKey}">
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="Stroke" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
    </Style>
    <Style TargetType="{x:Type Span}" x:Key="{x:Static markdig:Styles.SubscriptStyleKey}">
        <Setter Property="Typography.Variants" Value="Subscript" />
    </Style>
    <Style TargetType="{x:Type Span}" x:Key="{x:Static markdig:Styles.SuperscriptStyleKey}">
        <Setter Property="Typography.Variants" Value="Superscript" />
    </Style>
    <Style TargetType="{x:Type Span}" x:Key="{x:Static markdig:Styles.StrikeThroughStyleKey}">
        <Setter Property="TextBlock.TextDecorations" Value="Strikethrough" />
    </Style>
    <Style TargetType="{x:Type Span}" x:Key="{x:Static markdig:Styles.InsertedStyleKey}">
        <Setter Property="TextBlock.TextDecorations" Value="Underline" />
    </Style>
    <Style TargetType="{x:Type Span}" x:Key="{x:Static markdig:Styles.MarkedStyleKey}">
        <Setter Property="Background" Value="Yellow" />
    </Style>

    <!-- MarkdownViewer Template-->
    <Style TargetType="markdig:MarkdownViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="markdig:MarkdownViewer">
                    <FlowDocumentScrollViewer Document="{TemplateBinding Document}"
                                              ScrollViewer.VerticalScrollBarVisibility="Auto" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>